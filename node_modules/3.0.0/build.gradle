import org.yaml.snakeyaml.Yaml
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;

buildscript {
	ext {
		springBootVersion = '1.3.5.RELEASE'
	}
	repositories {
		maven {url nexusPublicRepoURL} 
  	}
	dependencies {
		classpath "org.cloudfoundry:cf-gradle-plugin:1.1.0"
		classpath 'com.discover.esqmci:discover-project-plugin:latest.release'
		classpath 'org.yaml:snakeyaml:1.17'
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    	classpath "com.moowork.gradle:gradle-node-plugin:latest.release"
    	classpath "com.moowork.gradle:gradle-gulp-plugin:latest.release"
    	classpath "org.apache.httpcomponents:httpclient:4.5.3"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'maven'
apply plugin: 'cloudfoundry'
apply plugin: 'com.moowork.gulp'


// If node is not installed globally
node {
	version = '6.9.0'
	npmVersion = '3.10.8'
	download = true
	workDir = file("${project.projectDir}/")
	npmWorkDir = file("${project.projectDir}/npm/")
	nodeModulesDir = file("${project.projectDir}/")
}

// runs 'clean' and 'gulp build' before gradle build
compileJava.dependsOn 'clean', 'gulp_build'

// processes your package.json before running gulp build
gulp_build.dependsOn 'gulp_clean'

// processes your package.json before running gulp build
gulp_clean.dependsOn 'installGulp'

// makes sure on each build that gulp is installed
installGulp.dependsOn 'npmInstall'

npmInstall.dependsOn 'npmHttpProxy'
npmInstall.dependsOn 'npmHttpsProxy'

task npmHttpProxy(type: NpmTask, group: 'node') {
    args = ['config', 'set', 'proxy', "http://${-> System.properties["http.proxyHost"]}:${-> System.properties["http.proxyPort"]}"]
}

task npmHttpsProxy(type: NpmTask, group: 'node') {
    args = ['config', 'set', 'https-proxy', "http://${-> System.properties["http.proxyHost"]}:${-> System.properties["http.proxyPort"]}"]
}

npmHttpProxy.onlyIf { System.properties.containsKey("http.proxyHost") }
npmHttpsProxy.onlyIf { System.properties.containsKey("http.proxyHost") }

gulp {
  // Set the directory where gulpfile.js should be found
  workDir = file("${project.projectDir}")

  // Whether colors should output on the terminal
  colors = true

  // Whether output from Gulp should be buffered - useful when running tasks in parallel
  bufferOutput = false
}

springBoot {
    mainClass = "com.discover.atlas.WebatlasApplication"
    executable = true
}

jar {
	baseName = 'poc'
	version = '0.0.1-SNAPSHOT'
}

project.ext {
	
	// Read the job parameter (activeProfile)
	    if (!project.hasProperty('activeProfile')) {
	        // Set it to default if not sent
	        activeProfile = 'default'
	    }
	    
		println "Active Profile ---> $activeProfile"
		
	// Read the YAML file
	    yaml = new Yaml()
	    //alFile = new File("$projectDir/src/main/resources/apiConfig.yml").text
	    apiConfigFile = project.file('src/main/resources/config.yml').text
	    apiConfigs = yaml.loadAll(apiConfigFile)
	    println "After loading config ---> $apiConfigs"
}

//* New Gradle task to jar source 
task sourcesJar(type: Jar, dependsOn: classes) { 
	classifier = 'sources' 
	from sourceSets.main.allSource 
} 


 
//* add new tasks to artifacts 
artifacts { 
	archives sourcesJar 
	//archives javadocJar 
	archives jar 
} 

eclipse { 
	classpath { 
 		downloadSources=true 
		downloadJavadoc=true 
	} 
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	maven { url nexusPublicRepoURL }
}


dependencies {
	compile('com.discover.callcenter.bank:BankSvcgCommon:1.8.0-SNAPSHOT'){
		exclude module: 'slf4j-log4j12'
		exclude module: 'j2ee'
	}
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	//compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.apache.httpcomponents:httpclient:4.5.1')
	compile('org.springframework.boot:spring-boot-starter-jersey')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('com.fasterxml.jackson.core:jackson-core:2.4.3')
	compile('com.fasterxml.jackson.core:jackson-databind:2.4.3')
	compile('org.json:json:20160810')
	compile('org.yaml:snakeyaml:1.17')
	compile('org.modelmapper:modelmapper:1.0.0')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile group: 'com.h2database', name: 'h2', version: '1.4.196'
	
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('info.cukes:cucumber-junit:1.2.5')
	testCompile('info.cukes:cucumber-spring:1.2.5')
	testCompile('org.seleniumhq.selenium:selenium-java:2.53.1')
	testCompile('commons-io:commons-io:2.4')
}

test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
 
        // Or we use events method:
        // events 'standard_out', 'standard_error'
 
        // Or set property events:
        // events = ['standard_out', 'standard_error']
 
        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}

jar {
	baseName = 'poc'
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Timestamp": new Date(),
                "Main-Class": "com.discover.atlas.WebatlasApplication",
                "Class-Path": configurations.compile.collect{it.getName()}.join(' ')
                )
    }
}
//Required for spring boot
bootRun {
	addResources = true
  if ( project.hasProperty('springDebug') ) {
      args '--debug'
        }
}
uploadArchives {

   // variables needed for script execution, but (IMO) uploadArchives should not be run locally 
  def nxUsername = System.getenv("nexusUsername") ?: "nexusUsernameNotSet"
  def nxPassword = System.getenv("nexusPassword") ?: "nexusPasswordNotSet"
 
 repositories {
 
      mavenDeployer {
            repository(url: nexusReleaseRepoURL) {
                authentication(userName: nxUsername, password: nxPassword)
            }
            snapshotRepository(url: nexusSnapshotRepoURL) {
                authentication(userName: nxUsername, password: nxPassword)
           }
      }
  }
}   
if( project.hasProperty( 'activeProfile' ) ){

println 'Deploying AtlasWeb in PaaS Environment'

       cloudfoundry {       
       def logLevel = "info"       
       println "While performing the active profile match apiConfigs ---> $apiConfigs"
       
       // Properties are read from YAML file which is in the resources folder

    // Loop thru all the profiles defined in the YAML and read the values from the active profile
    // Active profile will be passed as a parameter to the job
    apiConfigs.each {
        apiConfig ->
              //println "While looping through the apiConfigs object ---> $apiConfig"
            if (matches(apiConfig["spring"]["profiles"], activeProfile)) {
                // Read config from the active profile group
                target = apiConfig["pcf"]["target"]
                organization = apiConfig["pcf"]["organization"]
                space = apiConfig["pcf"]["space"]
                //username = cfUsername
                //password = cfPassword
                application = apiConfig["pcf"]["application"]
                host = apiConfig["pcf"]["host"]
                trustSelfSignedCerts = "true"
                     buildpack = "java_buildpack_offline_discover_OracleJRE8_jbp3_9"
                memory = apiConfig["pcf"]["memory"]
                diskQuota = apiConfig["pcf"]["diskQuota"]
                instances = apiConfig["pcf"]["instances"]
                logLevel = apiConfig["log"]["level"]
                //outLoc = apiConfig["rest-service"]["uri"]
                
                println "PCF Target ---> $target"
                println "PCF Organization ---> $organization"
                println "PCF Space ---> $space"
                println "PCF Application ---> $application"
                println "PCF Host ---> $host"
                //println "PCF OutBound Location ---> $outLoc"
            }        
     }

    // Add an environment variable for the active profile which the java code
    // reads and pull the configuration from the YAML accordingly
    env = [ "SPRING_PROFILES_ACTIVE": activeProfile,
            "LOG_LEVEL": logLevel,
            "JAVA_OPTS" : "-Dhttp.proxyHost=proxy.discoverfinancial.com -Dhttp.proxyPort=8080 -Dhttp.proxySet=true -DproxyHost=proxy.discoverfinancial.com -DproxyPort=8080"
            //"JAVA_OPTS" : "-Dappdynamics.http.proxyHost=170.217.74.84 -Dappdynamics.http.proxyPort=8080 -Dappdynamics.https.proxyHost=170.217.74.84 -Dappdynamics.https.proxyPort=8080"
          ]
              
 }
}

/**
* Splits the specified currentProfile and checks if the specified activeProfile
* matches with any of the available profile value
*/
def matches(currentProfile, activeProfile) {
    def matches = false
    def profiles = currentProfile.split(",")

    profiles.each {
       profile ->
            if (profile.equals(activeProfile)) {
                matches = true
            }
    }

    return matches
} 


/*********************** END TO END TEST SETUP ***********************/

//main task to run protractor tests
task e2e {
	doLast {
    	println "Starting protractor tests"
    }
}

	    
task startServer(type: Exec) {
	//assemble.mustRunAfter 'clean'
	commandLine = ["cmd", "/c", "java", "-jar", "${projectDir}/build/libs/poc-0.0.1-SNAPSHOT.jar", "--spring.profiles.active=\"mst0\""]
	//ready 'Started WebatlasApplication'
}

task startBootThread() << { 
    def bootThread = Thread.start { 
    	startServer.execute() 
    } 
    sleep 15000 
    println "wake up and continue work" 
} 

task webdriverManagerUpdate(type: NodeTask) {
    script = file('./node_modules/webdriver-manager/bin/webdriver-manager')
    args = ['update', '--ignore_ssl', '--proxy', 'http://proxy.discoverfinancial.com:8080']
}

task webdriverManagerStart(type: NodeTask) {
    script = file('./node_modules/webdriver-manager/bin/webdriver-manager')
    args = ['start', '--ignore_ssl', '--proxy', 'http://proxy.discoverfinancial.com:8080']
}

task startWebdriverThread() << { 
    def webdriverThread = Thread.start { 
    	webdriverManagerUpdate.execute() 
    	webdriverManagerStart.execute() 
    } 
    sleep 25000 
    println "wake up and continue work" 
} 

task runProtractor(type: NodeTask, dependsOn: ['startBootThread', 'startWebdriverThread']) {
	startWebdriverThread.mustRunAfter 'startBootThread'
   	script = file('./node_modules/protractor/bin/protractor')
    args = ['./protractor.conf.js']
}


task stopServers() {

	doFirst {
        HttpClient client = HttpClientBuilder.create().build()
        HttpPost post = new HttpPost("http://localhost:8080/shutdown")

        try {
            //post.setEntity(new UrlEncodedFormEntity(arguments));
            HttpResponse response = client.execute(post);

            // Print out the response message
            println EntityUtils.toString(response.getEntity());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    doLast {
    	println "server stopped"
    }
}

e2e.dependsOn 'runProtractor'
e2e.finalizedBy 'stopServers'

/*********************************************************************/
