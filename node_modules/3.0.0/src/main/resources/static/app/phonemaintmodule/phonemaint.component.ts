import { Component, OnInit } from '@angular/core';
import { SlicePipe } from '@angular/common';
//import { Router } from '@angular/router';
import { Title } from '@angular/platform-browser';
import { NgForm } from '@angular/forms';
import { Http } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { Customer } from "../shared/models/customer";
import { CustomerService } from "../shared/services/customer.service";
import { PhonemaintService } from "./phonemaint.service";
import { Phone } from "../shared/models/phone";
//import { PhoneMaintModule } from "../phonemaintmodule/phonemaint.module";



@Component({
    moduleId: module.id,
    selector: 'atlas-phonemaint',
    templateUrl: 'phonemaint.component.html',
    styleUrls: ['phonemaint.component.css']
  })
  
   export class PhonemaintComponent implements OnInit {
    type: any;
footer: boolean=false;
    phoneNumCityCodea=3;
    duplicatePhoneModal:boolean = false;
    addModel: any;
    mobileType: boolean = false;
    result: any={};
    phoneNumCityCode: any;
    oldCustomer: Customer;
    addNewPhoneView: boolean=false;
    checkedPreffered: boolean=false;
    numberOfPhones: number=0;
    
   // @Input() cifobj: string;
phoneTypeOptions: any[] = [{ 'value': 'Select', 'type': 'Select' }, { 'value': 'HOMEPH1', 'type': 'HOME' }, { 'value': 'WORKPH1', 'type': 'Business' }, { 'value': 'COMMPH1', 'type': 'Other' },{ 'value': 'FAX1', 'type': 'FAX' }];
    customer: Customer;
    customertemp:any={};
    //phonearray:Phone[];
    loadingphonemaintenance:boolean = true;
    loadnewphone:boolean = false;
    phone_maintenance_enablerow:boolean = false;
    phone_maintenance_enablenewrow:boolean=true;
    phonesedit:any={};
    phonesnew:any={};
    loading = true;
    phonenumberchecked:boolean=true;
    //changeDetected = false;
    phoneNumLocalCodeA:any;
    phoneNumLocalCodeB:any;
    loadspinner:boolean=true;
    PhoneMaintModal:boolean = false;
    newPhone: Phone;
    disabledNewButton: boolean = false;
    
  //variables that disable buttons or rows
    disabledSave:boolean=true;
    disabledNew: boolean = false;
    disabledUpdateTable: boolean = false;
    disabledSubmit: boolean = true;
    disabledDelete: boolean = true;
    disabledSelect: boolean = true;
    disabledRow: boolean = false;
    disabledAddTable: boolean = true;
    isUSChecked: boolean = true;
    forCheckbox: boolean = false;
    countryCode: any = {};
    extension:boolean =false;
    
    
    constructor(
            private titleService: Title,
            private http: Http,
            
            private phonemaintservice: PhonemaintService,private customerService: CustomerService) {
        
        console.clear();
        titleService.setTitle('ATLAS - Phone Maintenance');
    }
    
    

    ngOnInit() { 
        //customer object gets called on page loading 
        this.customer = this.customerService.getCustomer();
        this.oldCustomer = this.customerService.getCustomer();
        this.disableNewF();
         console.log('customer'+JSON.stringify(this.customer));
        
         
         
       // console.log('customer'+JSON.parse(this.customer));
        this.phonemaintservice.retrieveRevokedPhoneNumbers(this.customer)
            .subscribe(
                    customer => {
                    this.customer = customer;
                console.log('actula object'+this.customer);
                    
                    for(let i=0;i< this.customer.phoneArray.length;i++){
                        
                        this.phoneNumLocalCodeA = this.customer.phoneArray[i].phoneNumLocalCode.substring(0, 3);
                        this.customer.phoneArray[i].phoneNumLocalCodeA = this.phoneNumLocalCodeA;
                        console.log('phoneNumLocalCodeA'+this.phoneNumLocalCodeA);
                        this.phoneNumLocalCodeB = this.customer.phoneArray[i].phoneNumLocalCode.substring(3, this.customer.phoneArray[i].phoneNumLocalCode.length);
                        this.customer.phoneArray[i].phoneNumLocalCodeB = this.phoneNumLocalCodeB;
                        console.log('phoneNumLocalCodeB'+this.phoneNumLocalCodeB);
                       
                        
                    } 
                    this.loadingphonemaintenance = false; 
                    },
                    error => {
                        console.log(error);
                        this.loading = false;
                    });
        
        //calling the CountryCode Api
        this.phonemaintservice.retrieveCountryCodeInfo(this.customer)
        .subscribe(
                customer => {
                this.customer = customer;
            console.log('actula object'+this.customer);
                
                for(let i=0;i< this.customer.phoneArray.length;i++){
                    
          
                   
                    
                } 
                this.loadingphonemaintenance = false; 
                },
                error => {
                    console.log(error);
                    this.loading = false;
                });
       
        
    }
    
    
    
   updatephone(){
       alert("in  updatephone");
        
       this.phone_maintenance_enablerow=!this.phone_maintenance_enablerow;
    }
   
   save(){
       if(this.phone_maintenance_enablerow== true)
           {
           this.addTableF();
           }
     if(this.loadnewphone==true)
         {
         this.pushRow();
         }
           
       
   }
   
   
   checkboxvalue(){
      this.phonesedit.badPhoneEmailIndicator="N";
     
   }
   
      
    onUpdated() {        
        
    }
    
    onEdit(result: any){ 
      
        this.loadnewphone = false;
        this.loadingphonemaintenance=false;
        this.phone_maintenance_enablerow=true;
        this.phonesedit.phoneNumCityCode=result.phoneNumCityCode;
        this.phonesedit.phoneNumLocalCodeA= result.phoneNumLocalCodeA;
        this.phonesedit.phoneNumLocalCodeB=result.phoneNumLocalCodeB;
        this.phonesedit.phoneEmailType=result.phoneEmailType;
        
        this.disabledNew = true;
        this.disabledSave=false;
        this.disabledUpdateTable = true;
        this.disabledSubmit = true;
        this.disabledDelete = false;
        this.result = result;
        
    }
    PhoneMaintReset(){
        this.PhoneMaintModal = true;
    }
    PhoneMaintConfmationOk(){
            this.PhoneMaintModal = false;
            window.close(); 
        }
    pushRow()
    
    {
        this.disabledSave=false;
        this.newPhone.phoneOrEmail="PHONE";
       // this.newPhone.badPhoneEmailIndicator ='N';
       // this.newPhone.revocation="PHONE";
        this.loadnewphone=!this.loadnewphone;
        this.customer.phoneArray.push( this.newPhone );
       this.disableNewF();
       
        
        
    }
    
    
    
    typeF( type: any ) {
        
        
        this.type = type;
        let i: number;
        for ( i = 0; i < this.customer.phoneArray.length; i++ ) {
            if ( this.customer.phoneArray[i].phoneOrEmail == 'PHONE' ) {

                if ( this.customer.phoneArray[i].phoneEmailType == type.value ) {         // in case of duplicate emails type =>
                    this.duplicatePhoneModal = true;
                    this.disabledAddTable = true;

                }
                else {
                    if ( type.value != "Select" )
                    {
                        this.disabledAddTable = false;
                        
                        }          // if no problems with type 
                    else { this.disabledAddTable = true;   }      // if type - select
                }

            }
            



        }

    }


    
    addNewPhone(){ 
    
        let i : number;
        for (i=0; i>=this.customer.phoneArray.length; i++) {
            if (this.customer.phoneArray[i].phoneOrEmail == 'PHONE'){
                this.numberOfPhones+=1;
            }
           
            }
        if (this.numberOfPhones == 0){
            this.checkedPreffered = true;
        }
        
        this.loadnewphone = true;
        this.phone_maintenance_enablerow=false;
        this.disabledNew = false;
        this.newPhone = new Phone() ;
        this.newPhone.phoneEmailType = "Select";
    }
    
    
    deletePhone(){
   
        let i : number;
        alert(JSON.stringify(this.phonesedit));
        
        alert(JSON.stringify(this.result));
        
        for ( i = 0; i < this.customer.phoneArray.length; i++ ) {



            if ( this.customer.phoneArray[i].phoneNumLocalCodeA == this.result.phoneNumLocalCodeA ) {
                        this.customer.phoneArray.splice( i, 1 );

        }
    }
        this.disableNewF();
        this.loadnewphone = false;
        this.phone_maintenance_enablerow=false;
     }
    
    addToTableF(){
        
        this.customer.phoneArray.push( this.newPhone );
        this.phonemaintservice.updateCustomerInfo(this.customer.phoneArray);
        
        alert(JSON.stringify( this.customer.phoneArray ));
        
        }
    
    
    addTableF(){
        
 
        this.phone_maintenance_enablerow=false;
        this.disabledSubmit=false;
        //alert(this.result.isCellPhone);
       this.result.phoneNumCityCode=this.phonesedit.phoneNumCityCode;
        this.result.phoneNumLocalCodeA=this.phonesedit.phoneNumLocalCodeA;
        this.result.phoneNumLocalCodeB =this.phonesedit.phoneNumLocalCodeB;
        this.result.phoneEmailType=this.phonesedit.phoneEmailType;
        this.result.isCellPhone=this.phonesedit.isCellPhone;
        this.result.extension=this.phonesedit.extension;
        
        
        
        
    }
    checked()
    {
        this.customer.preferredPhone;
    }
    
    updateCustomerInfo() {
/*        this.newPhone = new Phone() ;
        this.customer.phoneArray.push(this.newPhone);
        alert(this.customer.phoneArray[this.customer.phoneArray.length].phoneEmailID);*/
        this.loading = false;
        this.loadspinner = false;
        for(let i=0; i < this.customer.phoneArray.length;i++){
            
            this.customer.phoneArray[i].phoneNumLocalCode =   this.customer.phoneArray[i].phoneNumLocalCodeA + "" +  this.customer.phoneArray[i].phoneNumLocalCodeB;
            this.customer.phoneArray[i].phoneNumber = this.customer.phoneArray[i].phoneNumCityCode + "" + this.customer.phoneArray[i].phoneNumLocalCode;
            this.customertemp = JSON.parse(JSON.stringify(this.customer));
            delete this.customertemp.phoneArray[i]['phoneNumLocalCodeA'];
            delete this.customertemp.phoneArray[i]['phoneNumLocalCodeB'];  
            console.log('final Object'+JSON.stringify(this.customertemp));
        } 
        this.phonemaintservice.updateCustomerInfo(this.customertemp)
            .subscribe(
                    data => {
                        //alert('Updates submited successfully , Please close the winodw');
                        this.loadspinner = true;
                        window.close();
                        
                     //   this.router.navigate([this.returnUrl]);
                    },
                    error => {
                        console.log(error);
                        this.loadspinner = true;
                        setTimeout(function(){                        
                            //alert("Hello");
                            alert('An error has occured!');                       
                         }, 300);                     
                        
                        this.loading = false;
                    });
    }
    
    
    
    disableNewF(){
        
        
        let numberOfPhones: number = 0;
    let i: number;
    
    
      for ( i = 0; i < this.customer.phoneArray.length; i++ ) {
          
        if ( this.customer.phoneArray[i].phoneOrEmail == 'PHONE' ) {
            numberOfPhones += 1;                                           //  count all objects with "EMAIL" value
        }
    }
    if ( numberOfPhones == 3 ) {
    
        this.disabledNewButton = true;
    }
    else {
        this.disabledNewButton =false;
    }
    
    }
    
    
    
    
    
    
    
    
}