import { Component, OnInit } from '@angular/core';
import { SlicePipe } from '@angular/common';
import { Router } from '@angular/router';
import { Title } from '@angular/platform-browser';
import { NgForm } from '@angular/forms';
import { Http } from '@angular/http';
import { Observable } from 'rxjs/Observable';

import { CustomerService } from "../shared/services/customer.service";
import { PhonemaintService } from "../phonemaintmodule/phonemaint.service";
import { Customer } from "../shared/models/customer";
import { Phone } from "../shared/models/phone";




@Component( {
    moduleId: module.id,
    selector: 'atlas-email-bypass',
    templateUrl: 'emailmaint.bypass.component.html',
    styleUrls: ['emailmaint.bypass.component.css']
} )

export class EmailByPassComponent {
    makePreferredModal: boolean = false;
    editType: string;
    editEmail: string;
    customer: Customer;
    mailbypassedit: any = {};
    mailbypassedittemp: any = {};
    mail_bypass_maintenance_enablerow: boolean = false;
    EmailByPassModal: boolean = false;
    loadspinner: boolean = true;
    emailTypeOptions: any[] = [{ 'value': 'Select', 'type': 'Select' }, { 'value': 'Primaryeml', 'type': 'HOME' }, { 'value': 'Business', 'type': 'Business' }, { 'value': 'Other', 'type': 'Other' }];
    result: any = {};
    addNewEmailView: boolean = false;
    checkedPreffered: boolean = false;
    newEmail: Phone;
    EmailByPassModalforMainCancel: boolean = false;
    deleteConfPopUp: boolean = false;
    makePreferredChecked: boolean = false;
    type: any = {};
    duplicateEmailModal: boolean = false;
    deleteAlert: boolean = false;


//variables that disable buttons or rows

    disabledNew: boolean = false;
    disabledUpdateTable: boolean = false;
    disabledSubmit: boolean = true;
    disabledDelete: boolean = true;
    disabledSelect: boolean = true;
    disabledRow: boolean = false;
    disabledAddTable: boolean = true;


    constructor(
        private titleService: Title,
        private customerService: CustomerService, private phonemaintservice: PhonemaintService ) {

        titleService.setTitle( 'ATLAS - Phone Maintenance' );
    }

    ngOnInit() {
		this.customer = this.customerService.getCustomer();
        this.mailbypassedittemp = JSON.parse( JSON.stringify( this.customer ) );
        this.disableNewF();

        
        
        let t: number;                                                           // when page loads check if customer already has 3 emails, if yes - disable "new" button
        for ( t = 0; t < this.customer.phoneArray.length; t++ ) {
            if ( this.customer.phoneArray[t].phoneOrEmail == 'EMAIL' ) {
                if ( this.customer.phoneArray[t].badPhoneEmailIndicator == "" ) {
                    this.customer.phoneArray[t].badPhoneEmailIndicator = "Y";
                }
            }
        }

        



    }


    
    onEditMailByPass( result: any ) {
        
        if ( this.disabledRow == false){        // IF STATEMENT TO  DISABLE ROW IN EMAIL TABLE WHEN NEEDED

            //this.mailbypassedit=result;    
            this.editEmail = result.emailID;      
            this.editType = result.phoneEmailType;                            //change existing email with inputs 
            this.mail_bypass_maintenance_enablerow = true;
            this.disabledNew = true;
            this.disabledUpdateTable = true;
            this.disabledDelete = false;
            this.result = result;
            this.disabledRow = true;
        } else {}
        



    }
    
    
 

    addNewEmailF() {
        
        // CHECK IF CUSTOMER ALREADY HAVE ANY EMAIL, IF NO - MAKE A NEW EMAIL ACTIVE BY DEFAULT
        
        let numberOfEmails: number = 0;
        let i: number;
        for ( i = 0; i >= this.customer.phoneArray.length; i++ ) {
            if ( this.customer.phoneArray[i].phoneOrEmail == 'EMAIL' ) {
                numberOfEmails += 1;
            }

        }
        if ( numberOfEmails == 0 ) {
            this.checkedPreffered = true;
        }
        
        //
        
        this.addNewEmailView = true;
        this.disabledNew = true;
        this.newEmail = new Phone();
        this.disabledRow = true;
        this.newEmail.phoneEmailType = "Select"; //to make default option "select"
        this.disabledAddTable = true;

    }


    disableNewF() {
        
     // CHECK IF CUSTOMER HAS 3 EMAILS, IF YES - DISABLE A "NEW" BUTTON
        
        let numberOfEmails: number = 0;
        let i: number;
        for ( i = 0; i > this.customer.phoneArray.length; i++ ) {
            if ( this.customer.phoneArray[i].phoneOrEmail == 'EMAIL' ) {
                numberOfEmails += 1;                                           //  count all objects with "EMAIL" value
            }
        }
        if ( numberOfEmails == 3 ) {
            this.disabledNew = true;
        }
        
     
    }


    /*mailByPassReset( obj: any ) {
        this.EmailByPassModal = true;
        this.disabledNew = false;
        this.disabledNew = false;
        this.addNewEmailView = false;

    }*/
 

    
    typeF( type: any ) {
        
        // DISABLE TYPES, THAT ANOTHER EMAILS ALREADY HAVE
        // DISABLE SELECT OPTION
        
        this.type = type;
        let i: number;
        for ( i = 0; i < this.customer.phoneArray.length; i++ ) {
            if ( this.customer.phoneArray[i].phoneOrEmail == 'EMAIL' ) {

                if ( this.customer.phoneArray[i].phoneEmailType == type.value ) {         // in case of duplicate emails type =>
                    this.duplicateEmailModal = true;
                    this.disabledAddTable = true;
                    this.disabledUpdateTable = true;

                }

            }
            else {
                if ( type.value != "Select" )
                {
                    this.disabledAddTable = false; this.disabledUpdateTable = false; }          // if no problems with type 
                else { this.disabledAddTable = true; this.disabledUpdateTable = true;  }      // if type - select
            }



        }

    }

    
    
    
    addTableF() {
        this.EmailByPassModal = false;
        this.mail_bypass_maintenance_enablerow = false;
        this.addNewEmailView = false;
        this.disabledSubmit = false;
        this.disabledNew = false;
        this.newEmail.phoneOrEmail = "EMAIL";       //set up properties by default 
        this.newEmail.badPhoneEmailIndicator = 'Y';    // ...
        this.customer.phoneArray.push( this.newEmail ); 
        this.disabledDelete = true;

        // AFTER ADDING A NEW EMAIL, CHECK NUMBER OF EMAILS
        let numberOfEmails: number = 0;
        let i: number;
        for ( i = 0; i < this.customer.phoneArray.length; i++ ) {
            if ( this.customer.phoneArray[i].phoneOrEmail == 'EMAIL' ) {
                numberOfEmails += 1;        

            }
        }
        if ( numberOfEmails == 3 ) {
            this.disabledNew = true;              // if 3 - disable "new" button
        }
                                                    // change  preferred email if checkbox is checked
        if ( this.makePreferredChecked == true ) {           
            let v: number;
            for ( v = 0; v < this.customer.phoneArray.length; v++ ) {
                if ( this.customer.phoneArray[v].phoneEmailType == this.customer.preferredEmail ) {      
                    this.customer.phoneArray[v].makePreferred = false;
                    this.customer.preferredEmail = this.newEmail.phoneEmailType;
                    this.newEmail.makePreferred = true;
                }
            }
        }
        this.disabledRow = false;


    }
    


    updateTableF() {

        this.disabledRow = false;

        if ( this.result.phoneEmailType != this.editType ) {                //if input email ID / email TYPE is not the same as previous = > 
            this.result.oldPhoneEmailType = this.result.phoneEmailType;      //   set up oldPhoneEmailType/previousEmailID + update table
            this.result.phoneEmailType = this.editType;
        }

        if ( this.result.emailID != this.editEmail ) {                 
            this.result.previousEmailID = this.result.emailID;
            this.result.emailID = this.editEmail;
        }
        
        

        
        // SWITCH ACTIVE EMAIL IF CHECKBOX IS CHECKED
        
        if ( this.makePreferredChecked == true ) {
            let v: number;
            for ( v = 0; v < this.customer.phoneArray.length; v++ ) { 
                if ( this.customer.phoneArray[v].phoneEmailType == this.customer.preferredEmail ) {
                    this.customer.phoneArray[v].makePreferred = false;
                    this.customer.preferredEmail = this.result.phoneEmailType;
                    this.result.makePreferred = true;
                }
            }
        }
        
        //


        this.mail_bypass_maintenance_enablerow = false;
        this.disabledDelete = true;
        this.disabledNew = false;
        this.disabledSubmit = false;
        this.disabledRow = false;


    }
    
    // FUNCTION TO DISCARD CHANGES FOR SPECIFIC EMAIL BY PRESSING " OK" ON CANCEL MODAL
    
    cancelOkF() {
        if ( this.mail_bypass_maintenance_enablerow == true ) {
            this.mail_bypass_maintenance_enablerow = null;
        } else {
            this.newEmail = null;
        };

        this.mail_bypass_maintenance_enablerow = false;
        this.disabledNew = false;
        this.disabledNew = false;
        this.addNewEmailView = false;
        this.disabledDelete = true;
        this.EmailByPassModal = false;
        this.disabledRow = false;
    }

    mainCancelF() {
        window.close();
    }



    deleteEmailF() {
        
        // CHECK IF EMAIL IS ACTIVE - IF YES - CANNOT DELETE modal - IF NO - deleteConfF()
        if ( this.result.phoneEmailType == this.customer.preferredEmail ) {
            this.deleteAlert = true;
            this.disabledDelete = true;
            
           
        } else {

            this.deleteConfPopUp = true;
            
        }
        
        //
        
    }
    // DELETE FUNCTION FOR EMAIL THAT IS NOT ACTIVE
    deleteConfF(){

        let i: number;
        for ( i = 0; i < this.customer.phoneArray.length; i++ ) {



            if ( this.customer.phoneArray[i].emailID == this.result.emailID ) { // SEARCH TROUGH EMAIL ADDRESSES FOR SPECIFIC => DELETE
                this.customer.phoneArray.splice( i, 1 );

            }
        }
        this.deleteConfPopUp = false;
        this.mail_bypass_maintenance_enablerow = false;
        this.disabledNew = false;
        this.disabledRow = false;
    }

    makePreferredF() {
        //this.makePreferredModal = true;
        this.makePreferredChecked = !this.makePreferredChecked;  // show makePreferredModal when agent check a 
        if ( this.makePreferredChecked == true){                    // and no, if "uncheck" 
            this.makePreferredModal = true;
        }else{}


    }

    mailByPassUpdate() {
        this.loadspinner = false;

        
        
        // IF WE WILL NEED TO ADD PROPERY "MODIFY" WE CAN DO IT IN "UPDATE TABLE" FUNCTION , 
        //SO WE DONT NEED THIS SEPARATE FUNCTION 
        
        
        /*for ( let i = 0; i < this.customer.phoneArray.length; i++ ) {
            for ( let j = 0; j < this.mailbypassedittemp.phoneArray.length; j++ ) {
                if ( i == j ) {
                    if ( this.mailbypassedittemp.phoneArray[j].emailID != '' ) {
                        if ( this.customer.phoneArray[i].emailID != this.mailbypassedittemp.phoneArray[j].emailID ) {
                            console.log( 'modifiedi' + this.customer.phoneArray[i].previousEmailID );
                            console.log( 'modifiedj' + this.mailbypassedittemp.phoneArray[j].emailID );
                            this.customer.phoneArray[i].modifiedStatus = 'MODIFIED';
                            this.customer.phoneArray[i].previousEmailID = this.mailbypassedittemp.phoneArray[j].emailID;
                        }
                    }
                    else {

                        this.customer.phoneArray[i].modifiedStatus = 'NOT_MODIFIED';
                    }
                }
            }


        }*/

        this.phonemaintservice.updateCustomerInfo( this.customer )
            .subscribe(
            data => {
                console.log( "success" + data );
                //   this.router.navigate([this.returnUrl]);

                //                    this.loadspinner = true;
                window.close();
            },
            error => {
                console.log( error );
                this.loadspinner = true;
                setTimeout( function() {

                    alert( 'An error has occured!' );
                }, 300 );

                // this.loading = false;
            } );


    }


}