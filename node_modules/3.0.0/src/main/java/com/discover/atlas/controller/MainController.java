package com.discover.atlas.controller;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.xml.bind.Marshaller;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.json.JSONObject;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.dfs.bank.common.vo.AgentDetailsVO;
import com.dfs.bank.common.vo.CustomerInfoRequestVO;
import com.dfs.bank.common.vo.CustomerInfoResponseVO;
import com.dfs.bank.common.vo.CustomerTaxVO;
import com.dfs.bank.common.vo.CustomerVO;
import com.dfs.bank.common.vo.DropDownRequestVO;
import com.dfs.bank.common.vo.DropDownResponseVO;
import com.dfs.bank.common.vo.DropDownVO;
import com.dfs.bank.common.vo.GetCountryCodeRequestVO;
import com.dfs.bank.common.vo.GetCountryCodeResponseVO;
import com.dfs.bank.common.vo.PhoneCountryVO;
import com.dfs.bank.common.vo.PhoneVO;
import com.dfs.bank.common.vo.RevokedPhoneRequestVO;
import com.dfs.bank.common.vo.RevokedPhoneResponseVO;
import com.dfs.bank.common.vo.SearchResponseVO;
import com.discover.atlas.common.vo.ButtonGroup;
import com.discover.atlas.common.vo.ButtonGroupDTO;
import com.discover.atlas.common.vo.Links;
import com.discover.atlas.common.vo.StatusVO;
import com.discover.atlas.util.AtlasWebSingleton;
import com.discover.atlas.util.AtlasWebUtil;

@RestController
@RequestMapping("/api")
public class MainController extends BaseController {

	@Autowired
	private ModelMapper modelMapper;

	private PhoneVO[] originalPhoneArray;

	@RequestMapping(value = "/sessionLogin", method = RequestMethod.POST)
	public ResponseEntity<String> login(@RequestBody Map<String, String> data) throws Exception {

		String postURL = REST_ENDPOINT + "/BankSvcgAccountInfo/resources/finacle_login/sessionLogin";
		System.out.println("Requesting --> " + postURL);

		String username = data.get("username");
		String password = data.get("password");

		String reqXML = "<loginRequestVO>" + "<sessionInfoVO>" + 
				"<applicationName>ATLAS</applicationName>" +
				"<password>" + password + "</password>" + 
				"<userName>" + username.toUpperCase() + "_AL1</userName>" +
				"</sessionInfoVO>" + "</loginRequestVO>";

		HttpEntity<String> request = createAtlasRequest(reqXML, getCredential(data));

		ResponseEntity<String> response = atlasRestTemplate.postForEntity(postURL, request, String.class);

		System.out.println("Obtained response --> " + response.getBody());
		ConfigurableEnvironment env = (ConfigurableEnvironment) appContext.getEnvironment();
		String environment = env.getActiveProfiles()[0];
		HttpHeaders responseHeaders = new HttpHeaders();
		responseHeaders.set("Environment", environment);

		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();
		InputSource is = new InputSource(new StringReader(response.getBody()));
		Document xml = builder.parse(is);

		NodeList elements = xml.getElementsByTagName("sessionId");

		String sessionId = (elements != null) ? elements.item(0).getTextContent() : "";

		JSONObject respJSON = new JSONObject();
		respJSON.put("username", username);
		respJSON.put("password", password);
		respJSON.put("sessionToken", sessionId);

		ResponseEntity<String> loginResp = new ResponseEntity<String>(respJSON.toString(), responseHeaders, HttpStatus.OK);
		return loginResp;
	}

	@RequestMapping(value = "/search", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public @ResponseBody CustomerVO[] search(@RequestBody Map<String, String> data) throws IOException {

		String postURL = REST_ENDPOINT + "/BankSvcgCustomerInfo/resources/bank_customer/search";
		System.out.println("Requesting --> " + postURL);

		String refNum = data.get("refnum");
		String refType = data.get("reftype");

		String reqXML = "<searchRequestVO><customerVO><entityType>" + refType + "</entityType><referenceNumber>"+refNum+"</referenceNumber>"
				+"</customerVO><agentDetailsVO><agentUserId>WSENG01_AL1</agentUserId></agentDetailsVO><channelId>CCR</channelId></searchRequestVO>";

		HttpEntity<String> request = createAtlasRequest(reqXML, "wseng01:wordpass");

		ResponseEntity<SearchResponseVO> response = atlasRestTemplate.postForEntity(postURL, request, SearchResponseVO.class);

		System.out.println("Obtained response --> " + response.getBody());

		CustomerVO[] customerVOArray = response.getBody().getCustomerVOArray();

		return customerVOArray;
	}

	@RequestMapping(value = "/fetchAccountSummary", method = RequestMethod.POST, produces = MediaType.APPLICATION_XML_VALUE)
	public ResponseEntity<String> fetchAccountSummary(@RequestBody Map<String, String> data) {

		String postURL = REST_ENDPOINT + "/BankSvcgAccountInfo/resources/bank_account/fetchAcctSummaryNew";
		System.out.println("Requesting --> " + postURL);

		String reqXML = "";

		HttpEntity<String> request = createAtlasRequest(reqXML, getCredential(data));

		ResponseEntity<String> response = atlasRestTemplate.postForEntity(postURL, request, String.class);

		System.out.println("Obtained response --> " + response.getBody());
		return new ResponseEntity<String>(response.getBody(), HttpStatus.OK);
	}

	@RequestMapping(value = "/fetchAppDetails", method = RequestMethod.POST, produces = MediaType.APPLICATION_XML_VALUE)
	public ResponseEntity<String> fetchAppDetails(@RequestBody Map<String, String> data) {

		String postURL = REST_ENDPOINT + "/BankOriginationsInfoWeb/resources/applinq/fetchfailedappdetails";
		System.out.println("Requesting --> " + postURL);

		String reqXML = "";

		HttpEntity<String> request = createAtlasRequest(reqXML, getCredential(data));

		ResponseEntity<String> response = atlasRestTemplate.postForEntity(postURL, request, String.class);

		System.out.println("Obtained response --> " + response.getBody());
		return new ResponseEntity<String>(response.getBody(), HttpStatus.OK);
	}

	@RequestMapping(value = "/fetchPriorityNotes", method = RequestMethod.POST, produces = MediaType.APPLICATION_XML_VALUE)
	public ResponseEntity<String> fetchPriorotyNotes(@RequestBody Map<String, String> data) {

		String postURL = REST_ENDPOINT + "/BankSvcgNotes/resources/customer_notes/fetchPriorotyNotes";
		System.out.println("Requesting --> " + postURL);

		String reqXML = "";

		HttpEntity<String> request = createAtlasRequest(reqXML, getCredential(data));

		ResponseEntity<String> response = atlasRestTemplate.postForEntity(postURL, request, String.class);

		System.out.println("Obtained --> " + response.getBody());
		return new ResponseEntity<String>(response.getBody(), HttpStatus.OK);
	}

	@RequestMapping(value = "/fetchNotes", method = RequestMethod.POST, produces = MediaType.APPLICATION_XML_VALUE)
	public ResponseEntity<String> fetchNotes(@RequestBody Map<String, String> data) {

		String postURL = REST_ENDPOINT + "/BankSvcgNotes/resources/customer_notes/fetchNotes";
		System.out.println("Requesting --> " + postURL);

		String reqXML = "";

		HttpEntity<String> request = createAtlasRequest(reqXML, getCredential(data));

		ResponseEntity<String> response = atlasRestTemplate.postForEntity(postURL, request, String.class);

		System.out.println("Obtained response --> " + response.getBody());
		return new ResponseEntity<String>(response.getBody(), HttpStatus.OK);
	}

	@RequestMapping(value = "/rates", method = RequestMethod.POST, produces = MediaType.APPLICATION_XML_VALUE)
	public ResponseEntity<String> getRates(@RequestBody Map<String, String> data) {

		String postURL = REST_ENDPOINT + "/BankProductInfoWeb/resources/Product/rates";
		System.out.println("Requesting --> " + postURL);

		String reqXML = "";

		HttpEntity<String> request = createAtlasRequest(reqXML, getCredential(data));

		ResponseEntity<String> response = atlasRestTemplate.postForEntity(postURL, request, String.class);

		System.out.println("Obtained response --> " + response.getBody());
		return new ResponseEntity<String>(response.getBody(), HttpStatus.OK);
	}

	@RequestMapping(value = "/recentServiceReq", method = RequestMethod.POST, produces = MediaType.APPLICATION_XML_VALUE)
	public ResponseEntity<String> recentServiceReq(@RequestBody Map<String, String> data) {

		String postURL = REST_ENDPOINT + "/BankSvcgCustomerInfo/resources/bank_customer/recentServiceReq";
		System.out.println("Requesting --> " + postURL);

		String reqXML = "";

		HttpEntity<String> request = createAtlasRequest(reqXML, getCredential(data));

		ResponseEntity<String> response = atlasRestTemplate.postForEntity(postURL, request, String.class);

		System.out.println("Obtained response --> " + response.getBody());
		return new ResponseEntity<String>(response.getBody(), HttpStatus.OK);
	}

	@RequestMapping(value = "/autoNoteInvocation", method = RequestMethod.POST, produces = MediaType.APPLICATION_XML_VALUE)
	public ResponseEntity<String> autoNoteInvocation(@RequestBody Map<String, String> data) {

		String postURL = REST_ENDPOINT + "/BankSvcgAccountInfo/resources/bank_account/autoNoteInvocation";
		System.out.println("Requesting --> " + postURL);

		String reqXML = "";

		HttpEntity<String> request = createAtlasRequest(reqXML, getCredential(data));

		ResponseEntity<String> response = atlasRestTemplate.postForEntity(postURL, request, String.class);

		System.out.println("Obtained response --> " + response.getBody());
		return new ResponseEntity<String>(response.getBody(), HttpStatus.OK);
	}

	@RequestMapping(value = "/retrieveRevokedPhoneNumbers", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public @ResponseBody CustomerVO retrieveRevokedPhoneNumbers(@RequestBody CustomerVO customerVO) throws IOException {

		String postURL = REST_ENDPOINT + "/BankSvcgCustomerInfo/resources/revocationService/getRevokedPhoneList";
		RevokedPhoneRequestVO revokedPhoneRequestVO=prepareRequestForRevokedPhoneNumbers(customerVO);
		StringWriter stringWriter = null;
		try {
			Marshaller marshaller = AtlasWebUtil.getJAXBContext(revokedPhoneRequestVO.getClass()).createMarshaller();
			stringWriter = new StringWriter();
			marshaller.marshal(revokedPhoneRequestVO, stringWriter);
		} catch (Exception exception) {
		}

		int length=stringWriter.toString().length();
		String reqXML = stringWriter.toString().substring(55, length);
		System.out.println("Requesting --> " + postURL);

		HttpEntity<String> request = createAtlasRequest(reqXML,"wseng01:wordpass");

		ResponseEntity<RevokedPhoneResponseVO> response = atlasRestTemplate.postForEntity(postURL, request, RevokedPhoneResponseVO.class);

		System.out.println("Obtained response --> " + response.getBody());
		CustomerVO custVO=prepareResponseForGetRevoledPhoneNumbers(response.getBody(),customerVO);
		return custVO;
	}
	
	@RequestMapping(value = "/retrieveCountryCodeInfo", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public @ResponseBody PhoneCountryVO[] retrieveCountryCodeInfo(@RequestBody GetCountryCodeRequestVO getCountryCodeRequestVO) throws IOException {

		String postURL = REST_ENDPOINT + "/BankSvcgSecurityWeb/resources/bank_countryService/phoneCountryCode";
		StringWriter stringWriter = null;
		try {
			Marshaller marshaller = AtlasWebUtil.getJAXBContext(getCountryCodeRequestVO.getClass()).createMarshaller();
			stringWriter = new StringWriter();
			marshaller.marshal(getCountryCodeRequestVO, stringWriter);
		} catch (Exception exception) {
		}

		int length=stringWriter.toString().length();
		String reqXML = stringWriter.toString().substring(55, length);
		System.out.println("Requesting --> " + postURL);

		HttpEntity<String> request = createAtlasRequest(reqXML,"wseng01:wordpass");

		ResponseEntity<GetCountryCodeResponseVO> response = atlasRestTemplate.postForEntity(postURL, request, GetCountryCodeResponseVO.class);

		System.out.println("Obtained response ---> " + response.getBody());
		PhoneCountryVO[] phoneCountry = response.getBody().getPhoneCountryVOArray();
		return phoneCountry;
	}
	

	@RequestMapping(value = "/getCodesAndDescription", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public Map<String, DropDownVO[]> getCodesAndDescription(@RequestBody DropDownRequestVO dropDownRequestVO) throws IOException {

		String postURL = REST_ENDPOINT + "/BankSvcgSecurityWeb/resources/bank_data/codesAndDescriptions";
		StringWriter stringWriter = null;
		try {
			Marshaller marshaller = AtlasWebUtil.getJAXBContext(dropDownRequestVO.getClass()).createMarshaller();
			stringWriter = new StringWriter();
			marshaller.marshal(dropDownRequestVO, stringWriter);
		} catch (Exception exception) {
		}

		int length=stringWriter.toString().length();
		String reqXML = stringWriter.toString().substring(55, length);
		System.out.println("Requesting --> " + postURL);

		HttpEntity<String> request = createAtlasRequest(reqXML,"wseng01:wordpass");

		ResponseEntity<DropDownResponseVO> dropDownResponseVO = atlasRestTemplate.postForEntity(postURL, request, DropDownResponseVO.class);

		System.out.println("Obtained response --> " + dropDownResponseVO.getBody());
		return dropDownResponseVO.getBody().getDropDownValues();
	}
	
	@RequestMapping(value = "/getZipCodeLookUP", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public CustomerInfoResponseVO getZipCodeLookUP(@RequestBody CustomerInfoRequestVO customerInfoRequestVO) throws IOException {

		String postURL = REST_ENDPOINT + "/BankSvcgCustomerInfo/resources/bank_customer/address/verify";
		StringWriter stringWriter = null;
		try {
			Marshaller marshaller = AtlasWebUtil.getJAXBContext(customerInfoRequestVO.getClass()).createMarshaller();
			stringWriter = new StringWriter();
			marshaller.marshal(customerInfoRequestVO, stringWriter);
		} catch (Exception exception) {
		}

		int length=stringWriter.toString().length();
		String reqXML = stringWriter.toString().substring(55, length);
		System.out.println("Requesting --> " + postURL);

		HttpEntity<String> request = createAtlasRequest(reqXML,"wseng01:wordpass");

		ResponseEntity<CustomerInfoResponseVO> customerInfoResponseVO = atlasRestTemplate.postForEntity(postURL, request, CustomerInfoResponseVO.class);

		System.out.println("Obtained response --> " + customerInfoResponseVO.getBody());
		return customerInfoResponseVO.getBody();
	}

	private CustomerVO prepareResponseForGetRevoledPhoneNumbers(RevokedPhoneResponseVO revokedPhoneResponseVO,CustomerVO customerVO) {
		List<PhoneVO> phoneDetails = new ArrayList<PhoneVO>();
		for(PhoneVO phoneVO : customerVO.getPhoneArray()){
			if(!AtlasWebUtil.isEmpty(revokedPhoneResponseVO) && !AtlasWebUtil.isEmpty(revokedPhoneResponseVO.getPhoneNumbers())){

				for(PhoneVO phone : revokedPhoneResponseVO.getPhoneNumbers()) {
					if(((phoneVO.getPhoneNumCityCode()+phoneVO.getPhoneNumLocalCode()).equalsIgnoreCase(phone.getPhoneNumber()))) {
						phoneVO.setRevocation("Yes");
					}
				}
			}
			if("Phone".equalsIgnoreCase(phoneVO.getPhoneOrEmail()) && !phoneVO.isPhoneOrEmailExpired()){
				phoneVO.setModifiedStatus("NOT_MODIFIED");
				if(customerVO.getPreferredPhone().equalsIgnoreCase(phoneVO.getPhoneEmailType())&&!AtlasWebUtil.isEmpty(phoneVO.getPhoneClassification())&&!"International".equalsIgnoreCase(phoneVO.getPhoneClassification())){
					phoneVO.setMakePreferred(true);
					phoneVO.setIsPhoneOrEmailPreferred("Y");
				}else{
					phoneVO.setMakePreferred(false);
					phoneVO.setIsPhoneOrEmailPreferred("N");

				}
				if(AtlasWebUtil.isEmpty(phoneVO.getBadPhoneEmailIndicator())){
					phoneVO.setBadPhoneEmailIndicator("Y");
				}else if(!AtlasWebUtil.isEmpty(phoneVO.getBadPhoneEmailIndicator())&&!"N".equalsIgnoreCase(phoneVO.getBadPhoneEmailIndicator())&&!"X".equalsIgnoreCase(phoneVO.getBadPhoneEmailIndicator())){
					phoneVO.setBadPhoneEmailIndicator("Y");
				}
				phoneDetails.add(phoneVO);
			}
		}
		PhoneVO[] phoneArray=new PhoneVO[phoneDetails.size()];  
		phoneArray=(PhoneVO[]) phoneDetails.toArray(phoneArray);
		originalPhoneArray = phoneArray;
		customerVO.setPhoneArray(phoneArray);
		return customerVO;
	}

	private RevokedPhoneRequestVO prepareRequestForRevokedPhoneNumbers(CustomerVO customerVO) {
		RevokedPhoneRequestVO revokedPhoneRequestVO = new RevokedPhoneRequestVO();
		if(!AtlasWebUtil.isEmpty(customerVO.getPhoneArray())){
			PhoneVO[] phoneVOs=customerVO.getPhoneArray();
			for(PhoneVO phoneVoTemp : phoneVOs){
				if(!AtlasWebUtil.isEmpty(phoneVoTemp.getPhoneNumCityCode()) && !AtlasWebUtil.isEmpty(phoneVoTemp.getPhoneNumLocalCode())){
					phoneVoTemp.setPhoneNumber(phoneVoTemp.getPhoneNumCityCode()+phoneVoTemp.getPhoneNumLocalCode());
				}
			}
			revokedPhoneRequestVO.setPhoneNumbers(phoneVOs);
		}
		return revokedPhoneRequestVO;
	}

	@RequestMapping(value = "/updateCustomerInfo", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<StatusVO> updateCustomerInfo(@RequestBody CustomerVO customerVO) throws IOException {

		String postURL = REST_ENDPOINT + "/BankSvcgCustomerInfo/resources/bank_customer/update";
		System.out.println("Requesting --> " + postURL);
		prepareRequestForSubmit(customerVO);
		CustomerVO finalCustomerVO=new CustomerVO();
		finalCustomerVO.setPhoneArray(customerVO.getPhoneArray());
		finalCustomerVO.setCifNumber(customerVO.getCifNumber());
		CustomerInfoRequestVO customerInfoRequestVO=new CustomerInfoRequestVO();
		customerInfoRequestVO.setCustLastName(customerVO.getLastName());
		customerInfoRequestVO.setCifNumber(customerVO.getCifNumber());
		customerInfoRequestVO.setCustomerVO(finalCustomerVO);
		customerVO.setFraudFlag("Y");
		CustomerTaxVO customerTaxVO=new CustomerTaxVO();
		customerTaxVO.setFraudFlag("Y");
		customerTaxVO.setMothersMaidenName("Y");
		customerInfoRequestVO.setCustomerTaxVO(customerTaxVO);
		AgentDetailsVO agentDetailsVO=new AgentDetailsVO();
		agentDetailsVO.setAgentUserId("WSENG01");
		customerInfoRequestVO.setChannelId("CCR");
		customerInfoRequestVO.setAgentDetailsVO(agentDetailsVO);

		StringWriter stringWriter = null;
		try {
			Marshaller marshaller = AtlasWebUtil.getJAXBContext(customerInfoRequestVO.getClass()).createMarshaller();
			stringWriter = new StringWriter();
			marshaller.marshal(customerInfoRequestVO, stringWriter);
		} catch (Exception exception) {
		}

		int length=stringWriter.toString().length();
		String reqXML = stringWriter.toString().substring(55, length);

		HttpEntity<String> request = createAtlasRequest(reqXML, "wseng01:wordpass");
		ResponseEntity<CustomerInfoResponseVO> response = null;
		System.out.println("Requesting --> " + postURL);
		try{
			response = atlasRestTemplate.postForEntity(postURL, request, CustomerInfoResponseVO.class);
		}catch(Exception e){
			e.printStackTrace();
		}
		if(!AtlasWebUtil.isEmpty(response) && !AtlasWebUtil.isEmpty(response.getBody())){
			System.out.println("Obtained response --> " + response.getBody());
			return new ResponseEntity<StatusVO>(new StatusVO(response.getBody().getStatus()), HttpStatus.OK);
		}else{
			return new ResponseEntity<StatusVO>(new StatusVO(response.getBody().getStatus()), HttpStatus.INTERNAL_SERVER_ERROR);	
		}
	}

	private void prepareRequestForSubmit(CustomerVO customerVO) {

		for(PhoneVO phoneVO :  customerVO.getPhoneArray()) {
			if(!AtlasWebUtil.isEmpty(phoneVO.getModifiedStatus())&&"MODIFIED".equalsIgnoreCase(phoneVO.getModifiedStatus())){
				if(!AtlasWebUtil.isEmpty(phoneVO.getPhoneClassification())&&"International".equalsIgnoreCase(phoneVO.getPhoneClassification())){
					phoneVO.setExtension("");
				}
				if(!AtlasWebUtil.isEmpty(phoneVO) && !AtlasWebUtil.isEmpty(phoneVO.getMakePreferred())){
					phoneVO.setIsPhoneOrEmailPreferred("Y");
					customerVO.setPreferredPhone(phoneVO.getPhoneEmailType());
				}else{
					phoneVO.setIsPhoneOrEmailPreferred("N"); 
				}
			}
		}

		if(!AtlasWebUtil.isEmpty(customerVO) && !AtlasWebUtil.isEmpty(customerVO.getPhoneArray())){
			for(PhoneVO modifiedPhone:customerVO.getPhoneArray()){
				if("PHONE".equalsIgnoreCase(modifiedPhone.getPhoneOrEmail())){
					if(!AtlasWebUtil.isEmpty(originalPhoneArray)){
						for(PhoneVO orgPhone : originalPhoneArray){
							if(!AtlasWebUtil.isEmpty(modifiedPhone.getPhoneNumber()) && !modifiedPhone.getPhoneNumber().equalsIgnoreCase(getCustPhoneNumberAsString(modifiedPhone))){
								modifiedPhone.setOldBadPhoneEmailIndicator(orgPhone.getBadPhoneEmailIndicator());
								modifiedPhone.setPreviousDoNotDisturb(orgPhone.getDoNotDisturb());
								modifiedPhone.setOldPhoneNumCountryCode(orgPhone.getPhoneNumCountryCode());
								modifiedPhone.setOldPhoneNumCityCode(orgPhone.getPhoneNumCityCode());
								modifiedPhone.setOldPhoneNumLocalCode(orgPhone.getPhoneNumLocalCode());
								modifiedPhone.setOldIsCellPhone(orgPhone.getIsCellPhone());
								String oldOutbound="";
								if("".equalsIgnoreCase(orgPhone.getOutboundCalls())||"null".equalsIgnoreCase(orgPhone.getOutboundCalls())){
									oldOutbound="null";
								}else{
									oldOutbound= orgPhone.getOutboundCalls();
								}
								modifiedPhone.setPreviousOutBoundCalls(oldOutbound);
								modifiedPhone.setOldPhoneEmailType(orgPhone.getPhoneEmailType());
								modifiedPhone.setPreviousIsPreferred(orgPhone.getIsPhoneOrEmailPreferred());
								modifiedPhone.setOutboundCalls("N");
								modifiedPhone.setPreviousOutBoundCalls("N");
								modifiedPhone.setModifiedStatus("MODIFIED");
								modifiedPhone.setPreviousIsPreferred("Y");
								modifiedPhone.setIsPhoneOrEmailPreferred("Y");
								modifiedPhone.setOldIsCellPhone("Y");
								modifiedPhone.setIsCellPhone("Y");
								if(modifiedPhone.getPhoneNumCountryCode().equalsIgnoreCase("1")|| modifiedPhone.getPhoneNumCountryCode().equalsIgnoreCase("+1")||
										modifiedPhone.getPhoneNumCountryCode().equalsIgnoreCase("01")|| modifiedPhone.getPhoneNumCountryCode().equalsIgnoreCase("+01") || 
										modifiedPhone.getPhoneNumCountryCode().equals("001")){
									modifiedPhone.setWorkPhoneNumCountryCode("US");
								}

								else
								{
									modifiedPhone.setWorkPhoneNumCountryCode("INT");
								}
							}
						}
					}
				}else if("EMAIL".equalsIgnoreCase(modifiedPhone.getPhoneOrEmail()) && "MODIFIED".equalsIgnoreCase(modifiedPhone.getModifiedStatus())){
					modifiedPhone.setDeletePhoneFlag("N");
				}
			}
		}
	}

	private String getCustPhoneNumberAsString(PhoneVO phoneVO) {
		StringBuffer phoneNumber = new StringBuffer("");
		if (("1").equalsIgnoreCase(phoneVO.getPhoneNumCountryCode())|| ("+1").equalsIgnoreCase(phoneVO.getPhoneNumCountryCode())
				|| ("01").equalsIgnoreCase(phoneVO.getPhoneNumCountryCode()) || ("+01").equalsIgnoreCase(phoneVO.getPhoneNumCountryCode())) {
			if (!AtlasWebUtil.isEmpty(phoneVO.getPhoneNumCountryCode())) {
				if (!phoneVO.getPhoneNumCountryCode().contains("+")) {
					phoneNumber.append("+");
				}
				phoneNumber.append(phoneVO.getPhoneNumCountryCode() + " ");
			}
			phoneNumber = AtlasWebUtil.isEmpty(phoneVO.getPhoneNumCityCode()) ? phoneNumber.append("()") : phoneNumber.append("("+ phoneVO.getPhoneNumCityCode() + ")" + " ");
			phoneNumber = AtlasWebUtil.isEmpty(phoneVO.getPhoneNumLocalCode()) ? phoneNumber.append("") : phoneNumber.append(phoneVO.getPhoneNumLocalCode().substring(0, 3)
					+ "-"+ phoneVO.getPhoneNumLocalCode().substring(3,phoneVO.getPhoneNumLocalCode().length()));
		}
		else {
			if (!AtlasWebUtil.isEmpty(phoneVO.getPhoneNumCountryCode())) {
				if (!phoneVO.getPhoneNumCountryCode().contains("+")) {
					phoneNumber.append("+");
				}
				phoneNumber.append(phoneVO.getPhoneNumCountryCode() + " ");
			}
			phoneNumber = AtlasWebUtil.isEmpty(phoneVO.getPhoneNumCityCode()) ? phoneNumber.append(" ()") : phoneNumber.append("("+ phoneVO.getPhoneNumCityCode() + ")" + " ");
			phoneNumber = AtlasWebUtil.isEmpty(phoneVO.getPhoneNumLocalCode()) ? phoneNumber.append("") : phoneNumber.append(phoneVO.getPhoneNumLocalCode());
		}
		return String.valueOf(phoneNumber);
	}

	@RequestMapping(value = "/getLinks",method = RequestMethod.POST)
	public ButtonGroupDTO findAll(@RequestBody ButtonGroup buttonGroup){
		Map<ButtonGroup, Map<String, List<Links>>> map= AtlasWebSingleton.getLinksMap();
		ButtonGroupDTO buttonGroupDTO=new ButtonGroupDTO();
		if(!AtlasWebUtil.isEmpty(buttonGroup) && !AtlasWebUtil.isEmpty(buttonGroup.getButtongroupname()) && !AtlasWebUtil.isEmpty(buttonGroup.getButtongrouplob())){
			if(!AtlasWebUtil.isEmpty(map.keySet())){
				for(ButtonGroup btnGroup:map.keySet()){
					if(buttonGroup.getButtongroupname().equalsIgnoreCase(btnGroup.getButtongroupname()) && buttonGroup.getButtongrouplob().equalsIgnoreCase(btnGroup.getButtongrouplob())){
						buttonGroupDTO=	modelMapper.map(btnGroup,ButtonGroupDTO.class);
						buttonGroupDTO.setButtonGroupMap(map.get(btnGroup));
					}
				}
			}
		}
		return buttonGroupDTO;
	}
}
		
		


