package com.discover.atlas;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import org.apache.commons.io.FileUtils;
import org.junit.Rule;
import org.junit.rules.TestRule;
import org.junit.rules.TestWatcher;
import org.junit.runner.Description;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.boot.test.SpringApplicationContextLoader;
import org.springframework.boot.test.WebIntegrationTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;

@ContextConfiguration(
		  classes = WebatlasApplication.class, 
		  loader = SpringApplicationContextLoader.class)
		@ActiveProfiles("mst0")
		@WebIntegrationTest
public class SeleniumWebTests {
	
	private WebDriver driver = DriverFactory.getInstance().getDriver();

	private final int PAGE_LOAD_TIMEOUT = 5;

	private final WebDriverWait wait = new WebDriverWait(driver, PAGE_LOAD_TIMEOUT);

	protected final String BASE_URL = "http://localhost:8080";

	@Rule
	public TestRule testWatcher = new TestWatcher() {
		@Override
		public void finished(Description test){
	        File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
	        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
	        String userHome = System.getProperty("user.home");
	        String filename = test.getClassName() + test.getMethodName() + timeStamp + ".png";
	        
	    try {
	          FileUtils.copyFile(screenshot, new File(userHome + "\\screenshots\\" + filename));
	    } catch (IOException e) {
	          e.printStackTrace();
	    }
	  }
	};

	protected void takeScreenshot(String testname) {
        File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
        String userHome = System.getProperty("user.home");
        String filename = testname + timeStamp + ".png";
        System.err.println("Got screenshot");
        System.err.println("Storing in file --> " + filename);
	    try {
	          FileUtils.copyFile(screenshot, new File(userHome + "\\screenshots\\" + filename));
	    } catch (IOException e) {
	          e.printStackTrace();
	    }

	}

	protected void goTo(String url) {
		driver.navigate().to(url);
	}
	
	protected String getPageTitle() {
		return driver.getTitle();
	}
	
	protected String getPageURL() {
		return driver.getCurrentUrl();
	}
		
	protected void enterTextByXpath(String xpath, String value) {
		driver.findElement(By.xpath(xpath)).sendKeys(value);
	}

	protected void enterTextById(String id, String value) {
		driver.findElement(By.id(id)).sendKeys(value);
	}

	protected void clickByXpath(String xpath) {
		driver.findElement(By.xpath(xpath)).click();
	}

	protected void clickById(String id) {
		driver.findElement(By.id(id)).click();
	}

	protected String getValueByXpath(String xpath) {
		return driver.findElement(By.xpath(xpath)).getText();
	}

	protected String getValueById(String id) {
		return driver.findElement(By.id(id)).getText();
	}

	protected boolean checkIsPopupDisplayedByCssSelector(String cssSelector) {
	   try {
			WebElement popup = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(cssSelector)));
			return popup.isDisplayed();
	     } catch (Exception ex) {
	    	 return false;
	     }
	}
	
	protected void complete() {
		DriverFactory.getInstance().removeDriver();
	}
}
