"use strict";

const gulp = require("gulp");
const browsersync = require('browser-sync').create();
const del = require("del");
const newer = require('gulp-newer');
const exec = require('child_process').exec;
const ts = require("gulp-typescript");
const sourcemaps = require('gulp-sourcemaps');
const replace = require('gulp-replace');
//const htmlmin = require('gulp-htmlmin');
//const uglify = require('gulp-uglify');
//const cleanCSS = require('gulp-clean-css');
//const tslint = require('gulp-tslint');

const staticDir = 'src/main/resources/static/';
const aotDir = 'aot/src/main/resources/static/';
const webAppDir = 'src/main/resources/static/app/';

const lib = [
    'core-js/client/shim.min.js',
    'zone.js/dist/zone.min.js',
    'bootstrap/dist/**/*.*',
    'font-awesome/**/*.*',
    'systemjs/dist/system-polyfills.js',
    'systemjs/dist/system.src.js',
    'reflect-metadata/Reflect.js'
];

const libjit = [
    'rxjs/**/*.js',
    'ngx-webstorage/bundles/**',
    'ngx-bootstrap/bundles/**',
    '@angular/**/bundles/**'
];

gulp.task('clean', (cb) => {
    return del(['aot/**'], cb);
});

gulp.task('library', () => {
    return gulp.src(lib, {cwd: "node_modules/**"})
        .pipe(newer(staticDir + 'dist/lib/'))
        .pipe(gulp.dest(staticDir + 'dist/lib/'))
});

// helper function for running ngc and tree shaking tasks
const run_proc = (cmd, callBack, options) => {
    let proc = exec(cmd, (err, stdout, stderr) => {
        if (options === undefined) options = {};
        if (options.outFilter !== undefined) stdout = options.outFilter(stdout);
        if (options.errFilter !== undefined) stderr = options.errFilter(stderr);
        process.stdout.write(stdout);
        process.stdout.write(stderr);
        callBack(err);
    });
};

const isWin = /^win/.test(process.platform);

gulp.task('ngc', cb => {
    let cmd  = 'node_modules/.bin/ngc -p tsconfig-aot.json';
    if (isWin) {
        cmd  = '"node_modules/.bin/ngc" -p tsconfig-aot.json';
    }
    return run_proc(cmd, cb);
});

gulp.task('rollup', ['ngc'], cb => {
    let cmd  = 'node_modules/.bin/rollup -c rollup-config.js';
    if (isWin) {
        cmd  = '"node_modules/.bin/rollup" -c rollup-config.js';
    }
    //cmd += ' && gzip --force src/main/resources/static/dist/app.js';
    // Filter known warning messages!
    const errFilter = (messages) => {
        const warningMsg = /The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten\./;
        return messages.split('\n').filter(line => !warningMsg.test(line)).join('\n');
    };
    return run_proc(cmd, cb, { errFilter: errFilter });
});

gulp.task('aot-build', ['rollup', 'library'], function() {
	gulp.src([staticDir + 'index.html'])
	.pipe(replace(/BUILD = (.*);/g, 'BUILD = \"BUILD_AOT\";'))
	.pipe(gulp.dest(staticDir));
});

gulp.task('jit-update', function() {
	gulp.src([staticDir + 'index.html'])
	.pipe(replace(/BUILD = (.*);/g, 'BUILD = \"BUILD_JIT\";'))
	.pipe(gulp.dest(staticDir));
});

/**
 * Build the project.
 */
gulp.task('build', ['aot-build'], () => {
    console.log("Building the project ...");
});

gulp.task('library-jit', ['library'], () => {
    return gulp.src(libjit, {cwd: "node_modules/**"})
        .pipe(newer(staticDir + 'lib/'))
        .pipe(gulp.dest(staticDir + 'lib/'))
});


gulp.task('typescript-compile', () => {
    let tsProject = ts.createProject('tsconfig.json');
    return  gulp.src(['typings/index.d.ts', webAppDir + '**/*.ts'])
        //.pipe(newer({dest: webAppDir, ext: '.js'}))
        .pipe(sourcemaps.init())
        .pipe(tsProject())
        .pipe(sourcemaps.write('/'))
        .pipe(gulp.dest(webAppDir))
});

gulp.task('html-replace', () => {
    return gulp.src(webAppDir + '**/*.html')
        .pipe(newer(webAppDir))
        .pipe(gulp.dest(webAppDir))
});

gulp.task('css-replace', () => {
    return gulp.src(webAppDir + '**/*.css')
        .pipe(newer(webAppDir))
        .pipe(gulp.dest(webAppDir))
});

/**
 * Watch for changes in TypeScript, HTML and CSS files.
 */
gulp.task('watch', ['jit-update'], function () {
	gulp.watch(webAppDir + '**/*.ts', ['typescript-compile']).on('change', function (e) {
        console.log('TypeScript file ' + e.path + ' has been changed. Compiling.');
    });
    gulp.watch(webAppDir + '**/*.html', ['html-replace']).on('change', function (e) {
        console.log('Resource file ' + e.path + ' has been changed. Updating.');
    });
    gulp.watch(webAppDir + '**/*.css', ['css-replace']).on('change', function (e) {
        console.log('Resource file ' + e.path + ' has been changed. Updating.');
    });
});

/**
 * Build the project.
 */
gulp.task('build-jit', ['typescript-compile', 'library-jit', 'html-replace', 'css-replace', 'jit-update'], () => {
    console.log("Building the project ...");
});